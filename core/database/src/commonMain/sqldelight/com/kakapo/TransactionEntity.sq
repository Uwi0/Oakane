CREATE TABLE TransactionTable (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    walletId INTEGER NOT NULL DEFAULT 0,
    title TEXT NOT NULL,
    amount REAL NOT NULL,
    type INTEGER NOT NULL,
    category INTEGER NOT NULL,
    dateCreated INTEGER NOT NULL,
    note Text,
    imageFile TEXT,
    FOREIGN KEY (category) REFERENCES CategoryTable(id),
    FOREIGN KEY (walletId) REFERENCES WalletTable(id) ON DELETE CASCADE
);

insert:
INSERT OR REPLACE INTO TransactionTable (
    walletId,
    title,
    amount,
    type,
    category,
    dateCreated,
    note,
    imageFile
)
VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
);

updateTransaction:
UPDATE TransactionTable
SET title = ?,
    amount = ?,
    type = ?,
    category = ?,
    dateCreated = ?,
    note = ?,
    imageFile = ?,
    walletId = ?
WHERE id = ?;

deleteTransaction:
DELETE FROM TransactionTable
WHERE id = ?;

getTransactions:
SELECT
    TransactionTable.id AS transactionId,
    TransactionTable.title,
    TransactionTable.amount,
    TransactionTable.type AS transactionType,
    TransactionTable.dateCreated,
    TransactionTable.note,
    TransactionTable.imageFile,
    CategoryTable.id AS categoryId,
    CategoryTable.name AS categoryName,
    CategoryTable.icon AS categoryIcon,
    CategoryTable.color AS categoryColor,
    CategoryTable.isDefault AS defaultCategory
FROM TransactionTable
INNER JOIN CategoryTable
ON TransactionTable.category = CategoryTable.id
ORDER BY dateCreated DESC;

getTransactionBy:
SELECT
    TransactionTable.id AS transactionId,
    TransactionTable.walletId,
    TransactionTable.title,
    TransactionTable.amount,
    TransactionTable.type AS transactionType,
    TransactionTable.dateCreated,
    TransactionTable.note,
    TransactionTable.imageFile,
    CategoryTable.id AS categoryId,
    CategoryTable.name AS categoryName,
    CategoryTable.icon AS categoryIcon,
    CategoryTable.color AS categoryColor,
    CategoryTable.isDefault AS defaultCategory
FROM TransactionTable
INNER JOIN CategoryTable
ON TransactionTable.category = CategoryTable.id
WHERE transactionId = ?;

getTotalTransactionBaseOn:
SELECT COALESCE(SUM(amount), 0) AS totalTransaction
FROM TransactionTable
WHERE type = ? AND dateCreated >= ? AND dateCreated <= ?;

getTotalTransactionBy:
SELECT COALESCE(SUM(amount), 0) AS totalTransaction
FROM TransactionTable
WHERE walletId = ? AND type = ? AND dateCreated >= ? AND dateCreated <= ?;

getTransactionCategory:
SELECT
    c.id AS categoryId,
    c.name AS categoryName,
    c.icon AS categoryIcon,
    c.color AS categoryColor,
    c.isDefault AS defaultCategory,
    t.type AS transactionType,
    SUM(t.amount) AS totalAmount
FROM TransactionTable t
INNER JOIN CategoryTable c
ON t.category = c.id
WHERE t.dateCreated >= ? AND t.dateCreated <= ?
GROUP BY c.id;

getTransactionCategoryBy:
SELECT
    c.id AS categoryId,
    c.name AS categoryName,
    c.icon AS categoryIcon,
    c.color AS categoryColor,
    c.isDefault AS defaultCategory,
    t.type AS transactionType,
    SUM(t.amount) AS totalAmount
FROM TransactionTable t
INNER JOIN CategoryTable c
ON t.category = c.id
WHERE t.walletId = ? AND t.dateCreated >= ? AND t.dateCreated <= ?
GROUP BY c.id
ORDER BY dateCreated DESC;

getTransactionsForBackup:
SELECT * FROM TransactionTable;

insertTransactionBackup:
INSERT OR REPLACE INTO TransactionTable(
    id,
    walletId,
    title,
    amount,
    type,
    category,
    dateCreated,
    note,
    imageFile
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?,
    ?
);