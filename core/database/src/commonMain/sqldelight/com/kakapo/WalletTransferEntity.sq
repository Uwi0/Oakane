CREATE TABLE WalletTransferTable (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    fromWalletId INTEGER NOT NULL,
    toWalletId INTEGER NOT NULL,
    amount REAL NOT NULL,
    notes TEXT,
    createdAt INTEGER NOT NULL DEFAULT (strftime('%s', 'now') * 1000),
    FOREIGN KEY(fromWalletId) REFERENCES WalletTable(id),
    FOREIGN KEY(toWalletId) REFERENCES WalletTable(id)
);

insertWalletTransfer:
INSERT OR REPLACE INTO WalletTransferTable(
    fromWalletId,
    toWalletId,
    amount,
    notes,
    createdAt
) VALUES (
    ?,
    ?,
    ?,
    ?,
    ?
);

getTransfersBy:
SELECT *
FROM (
    SELECT
        wt.id AS id,
        w1.name AS from_wallet_name,
        w2.name AS to_wallet_name,
        -(wt.amount) AS transfer_amount,
        wt.notes AS notes,
        wt.createdAt AS created_at,
        w1.id AS wallet_id,
        'OUTGOING' AS transfer_type
    FROM WalletTransferTable wt
    JOIN WalletTable w1 ON wt.fromWalletId = w1.id
    JOIN WalletTable w2 ON wt.toWalletId = w2.id
    WHERE w1.id = ?

    UNION ALL

    SELECT
        wt.id AS id,
        w1.name AS from_wallet_name,
        w2.name AS to_wallet_name,
        wt.amount AS transfer_amount,
        wt.notes AS notes,
        wt.createdAt AS created_at,
        w2.id AS wallet_id,
        'INCOMING' AS transfer_type
    FROM WalletTransferTable wt
    JOIN WalletTable w1 ON wt.fromWalletId = w1.id
    JOIN WalletTable w2 ON wt.toWalletId = w2.id
    WHERE w2.id = ?
)
ORDER BY created_at DESC;

getWalletTranfersForBackup:
SELECT * FROM WalletTransferTable;

insertWalletTransferBackup:
INSERT OR REPLACE INTO WalletTransferTable(id, fromWalletId, toWalletId, amount, notes, createdAt)
VALUES (?, ?, ?, ?, ?, ?);