CREATE TABLE CategoryLimitTable (
    id INTEGER NOT NULL PRIMARY KEY AUTOINCREMENT,
    categoryId INTEGER NOT NULL,
    monthlyBudgetId INTEGER NOT NULL,
    limitAmount REAL NOT NULL,
    spentAmount REAL NOT NULL DEFAULT 0,
    createdAt INTEGER NOT NULL DEFAULT (strftime('%s', 'now') * 1000),
    updatedAt INTEGER NOT NULL DEFAULT (strftime('%s', 'now') * 1000),
    FOREIGN KEY (categoryId) REFERENCES CategoryTable(id) ON DELETE CASCADE,
    FOREIGN KEY (monthlyBudgetId) REFERENCES MonthlyBudgetTable(id) ON DELETE CASCADE
);

checkCategoryLimitExists:
SELECT EXISTS (
    SELECT 1
    FROM CategoryLimitTable
    WHERE categoryId = ? AND monthlyBudgetId = ?
) AS existsFlag;

insertCategoryLimit:
INSERT OR REPLACE INTO CategoryLimitTable(
    categoryId,
    monthlyBudgetId,
    limitAmount
)
VALUES (
    ?,
    ?,
    ?
);

getTotalCategoryLimitBy:
SELECT COALESCE(SUM(limitAmount), 0) AS totalLimit
FROM CategoryLimitTable
WHERE monthlyBudgetId = ?;

getCategoryLimitBy:
SELECT * FROM CategoryLimitTable
WHERE categoryId = ?
AND monthlyBudgetId = ?;

getCategoryLimits:
SELECT
    CategoryLimitTable.id AS limitId,
    CategoryTable.id AS categoryId,
    CategoryTable.name AS categoryName,
    CategoryTable.icon AS categoryIcon,
    CategoryTable.color AS categoryColor,
    CategoryTable.isDefault AS categoryIsDefault,
    CategoryLimitTable.limitAmount,
    CategoryLimitTable.spentAmount
FROM CategoryLimitTable
JOIN CategoryTable ON CategoryLimitTable.categoryId = CategoryTable.id
WHERE monthlyBudgetId = ?;

updateCategoryLimit:
UPDATE CategoryLimitTable
SET categoryId = ?,
    limitAmount = ?,
    updatedAt = ?
WHERE id = ?;

updateIncrementSpendAmount:
UPDATE CategoryLimitTable
SET spentAmount = spentAmount + ?
WHERE id = ?;

updateSpentAmount:
UPDATE CategoryLimitTable
SET spentAmount = ?
WHERE id = ?;

getCategoryLimitForBackup:
SELECT * FROM CategoryLimitTable;
